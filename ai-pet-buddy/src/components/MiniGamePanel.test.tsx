/**
 * MiniGamePanel Áµ±Âêà„ÉÜ„Çπ„Éà
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { MiniGamePanel } from './MiniGamePanel';

// „É¢„ÉÉ„ÇØ„ÅÆË®≠ÂÆö
vi.mock('../hooks/useGame', () => ({
  useGame: vi.fn(() => ({
    currentSession: null,
    isGameActive: false,
    timeElapsed: 0,
    startGame: vi.fn(),
    playGame: vi.fn(),
    submitAnswer: vi.fn(),
    forceEndGame: vi.fn(),
    availableGames: [
      {
        type: 'memory',
        difficulty: 'easy',
        duration: 30,
        name: '„É°„É¢„É™„Éº„Ç≤„Éº„É†ÔºàÁ∞°ÂçòÔºâ',
        description: 'Áü≠„ÅÑÈ†ÜÂ∫è„ÇíË¶ö„Åà„Çà„ÅÜ',
        points: { correct: 10, wrong: -2, bonus: 5 }
      },
      {
        type: 'rock-paper-scissors',
        difficulty: 'easy',
        duration: 60,
        name: '„Åò„ÇÉ„Çì„Åë„ÇìÔºàÁ∞°ÂçòÔºâ',
        description: 'AI„Å®ÂãùË≤†ÔºÅ',
        points: { correct: 15, wrong: -3, bonus: 10 }
      },
      {
        type: 'number-guessing',
        difficulty: 'easy',
        duration: 120,
        name: 'Êï∞ÂΩì„Å¶ÔºàÁ∞°ÂçòÔºâ',
        description: '1-50„ÅÆÊï∞Â≠ó„ÇíÂΩì„Å¶„Çà„ÅÜ',
        points: { correct: 20, wrong: -5, bonus: 15 }
      }
    ],
    recentResults: [],
    bestScores: {}
  }))
}));

describe('MiniGamePanel', () => {
  const mockOnRewardEarned = vi.fn();
  const mockOnClose = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('„Ç≤„Éº„É†ÈÅ∏ÊäûÁîªÈù¢', () => {
    it('should render game selection with all available games', () => {
      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      // „Çø„Ç§„Éà„É´„ÅÆÁ¢∫Ë™ç
      expect(screen.getByText('üéÆ „Éü„Éã„Ç≤„Éº„É†')).toBeInTheDocument();

      // ÂêÑ„Ç≤„Éº„É†„Çø„Ç§„Éó„ÅÆË°®Á§∫Á¢∫Ë™ç
      expect(screen.getByText(/„É°„É¢„É™„Éº„Ç≤„Éº„É†/)).toBeInTheDocument();
      expect(screen.getByText(/„Åò„ÇÉ„Çì„Åë„Çì/)).toBeInTheDocument();
      expect(screen.getByText('Êï∞ÂΩì„Å¶„Ç≤„Éº„É†')).toBeInTheDocument();

      // „Ç≤„Éº„É†„Ç¢„Ç§„Ç≥„É≥„ÅÆÁ¢∫Ë™ç
      expect(screen.getByText('üß†')).toBeInTheDocument();
      expect(screen.getByText('‚úä')).toBeInTheDocument();
      expect(screen.getByText('üî¢')).toBeInTheDocument();
    });

    it('should display difficulty buttons for each game', () => {
      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      // Èõ£ÊòìÂ∫¶„Éú„Çø„É≥„ÅÆÁ¢∫Ë™ç
      const easyButtons = screen.getAllByText('Á∞°Âçò');
      expect(easyButtons.length).toBeGreaterThan(0);
    });

    it('should show game descriptions', () => {
      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      // „Ç≤„Éº„É†Ë™¨Êòé„ÅÆÁ¢∫Ë™ç (ÂÆüÈöõ„Å´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´Ë°®Á§∫„Åï„Çå„ÇãË™¨ÊòéÊñá)
      expect(screen.getByText('Ë°®Á§∫„Åï„Çå„ÅüËâ≤„ÅÆÈ†ÜÂ∫è„ÇíË¶ö„Åà„Å¶ÂÜçÁèæ„Åó„Çà„ÅÜÔºÅ')).toBeInTheDocument();
      expect(screen.getByText('AI„Å®ÂãùË≤†ÔºÅÈÄ£Âãù„ÇíÁõÆÊåá„Åù„ÅÜÔºÅ')).toBeInTheDocument();
      expect(screen.getByText('Èö†„Åï„Çå„ÅüÊï∞Â≠ó„ÇíÂäπÁéáÁöÑ„Å´ÂΩì„Å¶„Çà„ÅÜÔºÅ')).toBeInTheDocument();
    });
  });

  describe('„ÇØ„É≠„Éº„Ç∫„Éú„Çø„É≥', () => {
    it('should call onClose when close button is clicked', () => {
      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      const closeButton = screen.getByText('√ó');
      fireEvent.click(closeButton);

      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
  });

  describe('„Ç≤„Éº„É†Áµ±Âêà', () => {
    it('should handle rock-paper-scissors game integration', async () => {
      const mockUseGame = vi.fn(() => ({
        currentSession: {
          gameId: 'test-game',
          config: {
            type: 'rock-paper-scissors',
            difficulty: 'easy',
            duration: 60,
            name: '„Åò„ÇÉ„Çì„Åë„ÇìÔºàÁ∞°ÂçòÔºâ'
          },
          status: 'playing',
          startTime: new Date(),
          score: { points: 0, accuracy: 0, timeRemaining: 60, combo: 0 },
          questionHistory: [],
          currentQuestion: {
            playerChoice: null,
            aiChoice: null,
            result: null,
            consecutiveWins: 0,
            totalRounds: 5,
            currentRound: 1
          }
        },
        isGameActive: true,
        timeElapsed: 0,
        startGame: vi.fn(),
        playGame: vi.fn(),
        submitAnswer: vi.fn(),
        forceEndGame: vi.fn(),
        availableGames: [],
        recentResults: [],
        bestScores: {}
      }));

      // „É¢„ÉÉ„ÇØÊõ¥Êñ∞
      const { useGame } = await import('../hooks/useGame');
      vi.mocked(useGame).mockImplementation(mockUseGame);

      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      // „Åò„ÇÉ„Çì„Åë„Çì„Ç≤„Éº„É†„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await waitFor(() => {
        expect(screen.getByText(/„Åò„ÇÉ„Çì„Åë„Çì/)).toBeInTheDocument();
      });
    });

    it('should handle number-guessing game integration', async () => {
      const mockUseGame = vi.fn(() => ({
        currentSession: {
          gameId: 'test-game',
          config: {
            type: 'number-guessing',
            difficulty: 'easy',
            duration: 120,
            name: 'Êï∞ÂΩì„Å¶ÔºàÁ∞°ÂçòÔºâ'
          },
          status: 'playing',
          startTime: new Date(),
          score: { points: 0, accuracy: 0, timeRemaining: 120, combo: 0 },
          questionHistory: [],
          currentQuestion: {
            targetNumber: 25,
            currentGuess: null,
            attemptsLeft: 8,
            hints: [],
            minNumber: 1,
            maxNumber: 50
          }
        },
        isGameActive: true,
        timeElapsed: 0,
        startGame: vi.fn(),
        playGame: vi.fn(),
        submitAnswer: vi.fn(),
        forceEndGame: vi.fn(),
        availableGames: [],
        recentResults: [],
        bestScores: {}
      }));

      // „É¢„ÉÉ„ÇØÊõ¥Êñ∞
      const { useGame } = await import('../hooks/useGame');
      vi.mocked(useGame).mockImplementation(mockUseGame);

      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      // Êï∞ÂΩì„Å¶„Ç≤„Éº„É†„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await waitFor(() => {
        expect(screen.getByText('üî¢ Êï∞ÂΩì„Å¶„Ç≤„Éº„É†')).toBeInTheDocument();
      });
    });
  });

  describe('Â†±ÈÖ¨„Ç∑„Çπ„ÉÜ„É†Áµ±Âêà', () => {
    it('should handle reward earned callback', async () => {
      const mockUseGame = vi.fn(() => ({
        currentSession: null,
        isGameActive: false,
        timeElapsed: 0,
        startGame: vi.fn(),
        playGame: vi.fn(),
        submitAnswer: vi.fn(),
        forceEndGame: vi.fn(),
        availableGames: [],
        recentResults: [],
        bestScores: {}
      }));

      // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞‰ªò„Åç„Åß„É¢„ÉÉ„ÇØ„ÇíË®≠ÂÆö
      mockUseGame.mockImplementation((callbacks) => {
        // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅåÊ≠£„Åó„ÅèÊ∏°„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
        expect(callbacks.onRewardGiven).toBeDefined();
        expect(callbacks.onGameComplete).toBeDefined();
        
        return {
          currentSession: null,
          isGameActive: false,
          timeElapsed: 0,
          startGame: vi.fn(),
          playGame: vi.fn(),
          submitAnswer: vi.fn(),
          forceEndGame: vi.fn(),
          availableGames: [],
          recentResults: [],
          bestScores: {}
        };
      });

      const { useGame } = await import('../hooks/useGame');
      vi.mocked(useGame).mockImplementation(mockUseGame);

      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      expect(mockUseGame).toHaveBeenCalledWith(
        expect.objectContaining({
          onGameComplete: expect.any(Function),
          onRewardGiven: expect.any(Function)
        })
      );
    });
  });

  describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    it('should handle unsupported game types gracefully', async () => {
      const mockUseGame = vi.fn(() => ({
        currentSession: {
          gameId: 'test-game',
          config: {
            type: 'unknown-game' as any,
            difficulty: 'easy',
            duration: 60,
            name: 'Êú™Áü•„ÅÆ„Ç≤„Éº„É†'
          },
          status: 'playing',
          startTime: new Date(),
          score: { points: 0, accuracy: 0, timeRemaining: 60, combo: 0 },
          questionHistory: [],
          currentQuestion: null
        },
        isGameActive: true,
        timeElapsed: 0,
        startGame: vi.fn(),
        playGame: vi.fn(),
        submitAnswer: vi.fn(),
        forceEndGame: vi.fn(),
        availableGames: [],
        recentResults: [],
        bestScores: {}
      }));

      const { useGame } = await import('../hooks/useGame');
      vi.mocked(useGame).mockImplementation(mockUseGame);

      render(
        <MiniGamePanel 
          onRewardEarned={mockOnRewardEarned}
          onClose={mockOnClose}
        />
      );

      // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
      await waitFor(() => {
        expect(screen.getByText('Êú™ÂØæÂøú„ÅÆ„Ç≤„Éº„É†„Çø„Ç§„Éó„Åß„Åô')).toBeInTheDocument();
      });
    });
  });
});